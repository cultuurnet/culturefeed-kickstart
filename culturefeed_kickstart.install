<?php
/**
 * @file 
 * Installation file to add configuration and displays for the Kickstart project.
 */

/**
 * Implements hook_install().
 */
function culturefeed_kickstart_install() {
  
  // Import the domains and terms.
  $import = new CultureFeedDomainImport();
  $import->import();

  // Import the cities.
  $import = new CultureFeedCityImport();
  $import->import();
  
  // Enable some modules.
  module_enable(array('block','menu','contact','contextual','filter','path'));
  
  // Enable themes
  theme_enable(array('bootstrap','culturefeed_bootstrap','seven'));
  variable_set('theme_default', 'culturefeed_bootstrap');
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');
  $default_theme = variable_get('theme_default', 'culturefeed_bootstrap');
  
  // Enable blocks for pages
  $blocks = array(

    // Module culturefeed_agenda
    array(
      'module' => 'culturefeed_agenda',
      'delta' => 'agenda-related-activities',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => "agenda/e/*\r\nagenda/p/*",
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_agenda',
      'delta' => 'agenda-search-block',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -31,
      'region' => 'header',
      'pages' => '',
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_agenda',
      'delta' => 'actor-program',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => 'agenda/a/*',
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_agenda',
      'delta' => 'production-program',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => 'agenda/p/*',
      'visibility' => 1,
      'cache' => -1
    ),
    
    // Module culturefeed_search_ui
    array(
      'module' => 'culturefeed_search_ui',
      'delta' => 'culturefeed-search-activefilters',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -39,
      'region' => 'content',
      'pages' => "agenda/search\r\nagenda/pages",
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_search_ui',
      'delta' => 'culturefeed-search-sortorder',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -37,
      'region' => 'content',
      'pages' => 'agenda/search*',
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_search_ui',
      'delta' => 'facet-actortype',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -37,
      'region' => 'sidebar_first',
      'pages' => 'agenda/pages',
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_search_ui',
      'delta' => 'facet-datetype',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -38,
      'region' => 'sidebar_first',
      'pages' => 'agenda/search',
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_search_ui',
      'delta' => 'facet-city',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -36,
      'region' => 'sidebar_first',
      'pages' => "agenda/search\r\nagenda/pages",
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_search_ui',
      'delta' => 'facet-eventtype',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -34,
      'region' => 'sidebar_first',
      'pages' => 'agenda/search',
      'visibility' => 1,
      'cache' => -1
    ),
    
    // Module culturefeed_social
    array(
      'module' => 'culturefeed_social',
      'delta' => 'recent-activities',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_second',
      'pages' => '<front>',
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_social',
      'delta' => 'comments',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 5,
      'region' => 'content',
      'pages' => "agenda/e/*\r\nagenda/p/*\r\node/*",
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_social',
      'delta' => 'user-activities',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 5,
      'region' => 'content',
      'pages' => 'user*',
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_social',
      'delta' => 'recommended-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -31,
      'region' => 'sidebar_second',
      'pages' => "agenda/e/*\r\nagenda/p/*",
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_social',
      'delta' => 'followers',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -31,
      'region' => 'sidebar_second',
      'pages' => 'agenda/g/*',
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_social',
      'delta' => 'recommendations',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -31,
      'region' => 'content',
      'pages' => "agenda/e/*\r\nagenda/p/*",
      'visibility' => 1,
      'cache' => -1
    ),

    // Module culturefeed_ui
    array(
      'module' => 'culturefeed_ui',
      'delta' => 'profile_box',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -29,
      'region' => 'navigation',
      'pages' => '',
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_ui',
      'delta' => 'profile_menu',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -28,
      'region' => 'sidebar_second',
      'pages' => "culturefeed/profile/*\r\nculturefeed/account/*\r\nculturefeed/activities/*\r\nculturefeed/pages/*\r\nuser/*",
      'visibility' => 1,
      'cache' => -1
    ),
    array(
      'module' => 'culturefeed_ui',
      'delta' => 'my_uitid',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -60,
      'region' => 'sidebar_second',
      'pages' => "agenda/e*\r\nagenda/p*\r\nagenda/a*\r\nagenda/g*",
      'visibility' => 1,
      'cache' => -1
    ),
    
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache', 'visibility'));
  foreach ($blocks as $block) {
    $block['visibility'] = isset($block['visibility']) ? $block['visibility'] : 0;
    $query->values($block);
  }
  $query->execute();
  
  // Set drupal variables
  variable_set('menu_secondary_links_source', '');
  
  // Set additional culturefeed variables
  // Use default pager (not infinite scroll)
  variable_set('culturefeed_search_ui_pager_type', 0);
  variable_set('culturefeed_social_report_destin', 1);
  // Set the domain id
  variable_set('agenda_search_block_domain_id', 'eventtype');
  
  // Insert default user-defined node types into the database
  $type = array(
      'type' => 'page',
      'name' => t('Page'),
      'base' => 'node_content',
      'description' => t('If you want to add a static page, like a contact page or an about page, use a page.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
  );
  
  $type = node_type_set_defaults($type);
  node_type_save($type);
  node_add_body_field($type);

  // Default page to not be promoted and have comments disabled.
  $theme_settings = variable_get('theme_settings', array());
  $theme_settings['toggle_node_info_page'] = FALSE;
  variable_set('comment_page', COMMENT_NODE_DISABLED);
  variable_set('theme_settings', $theme_settings);

  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'node', 'access user profiles', $filtered_html_permission, 'access site wide contact form'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'node', 'access user profiles', $filtered_html_permission, 'access site wide contact form'));
  
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Create a Agenda link in the main menu.
  $item = array(
    'link_title' => st('Agenda'),
    'link_path' => 'agenda/search',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Create a Contact link in the main menu.
  $item = array(
    'link_title' => st('Contact'),
    'link_path' => 'contact',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();
  
}
